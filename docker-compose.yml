version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: multitenant-postgres
    environment:
      POSTGRES_DB: multitenant_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - multitenant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: multitenant-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - multitenant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: multitenant-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - multitenant-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: multitenant-api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - AUTH_SERVICE_URL=http://auth-service:8001
      - TENANT_SERVICE_URL=http://tenant-service:8002
      - BOOKING_SERVICE_URL=http://booking-operations-service:8004
      - COMMUNICATION_SERVICE_URL=http://communication-service:8005
      - CRM_SERVICE_URL=http://crm-service:8006
      - FINANCIAL_SERVICE_URL=http://financial-service:8007
      - SYSTEM_SERVICE_URL=http://system-service:8008
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - auth-service
      - tenant-service
    networks:
      - multitenant-network
    volumes:
      - ./services/api-gateway:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: multitenant-auth-service
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_HOURS=24
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - multitenant-network
    volumes:
      - ./services/auth-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  # Tenant Service
  tenant-service:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile
    container_name: multitenant-tenant-service
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - multitenant-network
    volumes:
      - ./services/tenant-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload

  # System Service (Tenant user management)
  system-service:
    build:
      context: ./services/system-service
      dockerfile: Dockerfile
    container_name: multitenant-system-service
    ports:
      - "8008:8008"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - multitenant-network
    volumes:
      - ./services/system-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8008 --reload

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: multitenant-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - multitenant-network
    stdin_open: true
    tty: true
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: multitenant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - api-gateway
      - frontend
    networks:
      - multitenant-network

  # Celery Worker for async tasks
  celery-worker:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile
    container_name: multitenant-celery-worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - multitenant-network
    volumes:
      - ./services/tenant-service:/app
    command: celery -A celery_app worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile
    container_name: multitenant-celery-beat
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - multitenant-network
    volumes:
      - ./services/tenant-service:/app
    command: celery -A celery_app beat --loglevel=info

  # Communication Service
  communication-service:
    build:
      context: ./services/communication-service
      dockerfile: Dockerfile
    container_name: multitenant-communication-service
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - SERVICE_PORT=8005
    depends_on:
      - postgres
      - redis
    networks:
      - multitenant-network
    volumes:
      - ./services/communication-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8005 --reload

  # CRM Service
  crm-service:
    build:
      context: ./services/crm-service
      dockerfile: Dockerfile
    container_name: multitenant-crm-service
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
    depends_on:
      - postgres
      - redis
    networks:
      - multitenant-network
    volumes:
      - ./services/crm-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8006 --reload

  # Financial Service
  financial-service:
    build:
      context: ./services/financial-service
      dockerfile: Dockerfile
    container_name: multitenant-financial-service
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
    depends_on:
      - postgres
      - redis
    networks:
      - multitenant-network
    volumes:
      - ./services/financial-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8007 --reload

  # Booking Operations Service
  booking-operations-service:
    build:
      context: ./services/booking-operations-service
      dockerfile: Dockerfile
    container_name: multitenant-booking-operations-service
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/multitenant_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
    depends_on:
      - postgres
      - redis
      - financial-service
      - crm-service
    networks:
      - multitenant-network
    volumes:
      - ./services/booking-operations-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8004 --reload

  # Nginx Reverse Proxy
  # Flower for Celery monitoring
  flower:
    build:
      context: ./services/tenant-service
      dockerfile: Dockerfile
    container_name: multitenant-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - multitenant-network
    command: celery -A celery_app flower

networks:
  multitenant-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
